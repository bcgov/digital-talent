// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider             = "prisma-nestjs-graphql"
  output               = "../src/@generated/prisma-nestjs-graphql"
  combineScalarFilters = true
  noAtomicOperations   = true
  omitModelsCount      = true
  purgeOutput          = true
  reExport             = Single

  decorate_1_type      = "FindMany*Args"
  decorate_1_field     = "@(cursor|distinct)"
  decorate_1_name      = "HideField"
  decorate_1_from      = "@nestjs/graphql"
  decorate_1_arguments = "[]"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Common Models
model Classification {
  id                  String    @id @db.Uuid
  grid_id             String    @db.Uuid
  occupation_group_id String    @db.Uuid
  rate_adjustment     Decimal   @default(0.0)
  created_at          DateTime
  updated_at          DateTime?
  deleted_at          DateTime?

  job_descriptions JobDescription[]
  grid             Grid             @relation(fields: [grid_id], references: [id])
  occupation_group OccupationGroup  @relation(fields: [occupation_group_id], references: [id])

  @@map("classification")
}

model Grid {
  id         String    @id @db.Uuid
  name       String
  steps      Json[]
  created_at DateTime
  updated_at DateTime?
  deleted_at DateTime?

  classifications Classification[]

  @@map("grid")
}

model JobDescription {
  id                String    @id @db.Uuid
  classification_id String    @db.Uuid
  e_class_id        String?
  name              String
  created_at        DateTime
  updated_at        DateTime?
  deleted_at        DateTime?

  classification Classification @relation(fields: [classification_id], references: [id])
  Competition    Competition[]

  @@map("job_description")
}

model Ministry {
  id         String    @id @db.Uuid
  deltek_id  String
  name       String
  created_at DateTime
  updated_at DateTime?
  deleted_at DateTime?

  opportunities Opportunity[]

  @@map("ministry")
}

model OccupationGroup {
  id         String    @id @db.Uuid
  code       String
  name       String
  created_at DateTime
  updated_at DateTime?
  deleted_at DateTime?

  classifications Classification[]

  @@unique([code])
  @@map("occupation_group")
}

enum SkillCategory {
  CLOUD_PLATFORMS
  COMMUNICATION
  CONTAINER_PLATFORMS
  DATABASES
  DEVELOPMENT_TOOLS
  FRAMEWORKS_AND_LIBRARIES
  KNOWLEDGE
  OPERATING_SYSTEMS
  PRODUCTIVITY
  PROGRAMMING_LANGUAGES
}

model Skill {
  id          String        @id @db.Uuid
  category    SkillCategory
  name        String
  description String?
  created_at  DateTime
  updated_at  DateTime?
  deleted_at  DateTime?

  applications     ApplicationSkill[]
  competitions     CompetitionSkill[]
  // opportunities OpportunitySkill[]
  OpportunitySkill OpportunitySkill[]

  @@map("skill")
}

// Competition Models
enum CompetitionCategory {
  CMH
  RH
}

enum CompetitionState {
  DRAFT
  PUBLISHED
  INTAKE_PERIOD
  APPLICATION_PERIOD
  SCREENING_PERIOD
  ASSESSMENT_PERIOD
  INTERVIEW_PERIOD
  OFFER_PERIOD
  CLOSED
  CANCELLED
}

model Competition {
  id                 String              @id @db.Uuid
  deltek_id          String?
  job_description_id String              @db.Uuid
  recruiter_id       String              @db.Uuid
  category           CompetitionCategory
  state              CompetitionState
  metadata           Json
  created_at         DateTime
  updated_at         DateTime?
  deleted_at         DateTime?

  opportunities   Opportunity[]
  elist           Elist[]
  skills          CompetitionSkill[]
  job_description JobDescription       @relation(fields: [job_description_id], references: [id])
  recruiter       User                 @relation(fields: [recruiter_id], references: [id])
  schedule        CompetitionSchedule?

  @@map("competition")
}

model CompetitionSkill {
  competition_id       String    @db.Uuid
  skill_id             String    @db.Uuid
  min_years_experience Int
  is_required          Boolean
  created_at           DateTime
  updated_at           DateTime?
  deleted_at           DateTime?

  competition Competition @relation(fields: [competition_id], references: [id])
  skill       Skill       @relation(fields: [skill_id], references: [id])

  @@id([competition_id, skill_id])
  @@map("competition_skill")
}

model CompetitionSchedule {
  id             String           @id @db.Uuid
  competition_id String           @unique @db.Uuid
  state          CompetitionState
  start_at       DateTime
  end_at         DateTime
  created_at     DateTime
  updated_at     DateTime?
  deleted_at     DateTime?

  competition Competition @relation(fields: [competition_id], references: [id])

  @@map("competition_schedule")
}

// User Models
model User {
  id         String    @id @db.Uuid
  deltek_id  String?   @unique
  name       String?
  email      String?   @unique
  roles      String[]
  created_at DateTime
  updated_at DateTime?
  deleted_at DateTime?

  applications Application[]
  competitions Competition[]
  identities   Identity[]
  elist        Elist[]
  Comment      Comment[]
  Opportunity  Opportunity[]

  @@map("user")
}

model Identity {
  sub               String
  identity_provider String
  user_id           String    @db.Uuid
  created_at        DateTime
  updated_at        DateTime?
  deleted_at        DateTime?

  user User @relation(fields: [user_id], references: [id])

  @@id([sub, identity_provider])
  @@map("identity")
}

model Application {
  id           String    @id @db.Uuid
  applicant_id String    @db.Uuid
  created_at   DateTime
  updated_at   DateTime?
  deleted_at   DateTime?

  json Json

  locations ApplicationLocation[]
  skills    ApplicationSkill[]
  applicant User                  @relation(fields: [applicant_id], references: [id])

  @@map("application")
}

enum LocationRegion {
  CARIBOO
  KOOTENAY
  MAINLAND_SOUTHWEST
  NORTH_COAST
  NORTHEAST
  THOMPSON_OKANAGAN
  VANCOUVER_ISLAND_COAST
}

model Location {
  id          String         @id @db.Uuid
  deltek_id   String
  name        String
  postal_code String
  lat         Float
  lon         Float
  region      LocationRegion
  created_at  DateTime
  updated_at  DateTime?
  deleted_at  DateTime?

  applications  ApplicationLocation[]
  opportunities OpportunityLocation[]

  @@map("location")
}

model ApplicationLocation {
  application_id String    @db.Uuid
  location_id    String    @db.Uuid
  rank           Int
  created_at     DateTime
  updated_at     DateTime?
  deleted_at     DateTime?

  application Application @relation(fields: [application_id], references: [id])
  location    Location    @relation(fields: [location_id], references: [id])

  @@id([application_id, location_id])
  @@map("application_location")
}

model ApplicationSkill {
  application_id   String    @db.Uuid
  skill_id         String    @db.Uuid
  years_experience Int
  description      String
  created_at       DateTime
  updated_at       DateTime?
  deleted_at       DateTime?

  application Application @relation(fields: [application_id], references: [id])
  skill       Skill       @relation(fields: [skill_id], references: [id])

  @@id([application_id, skill_id])
  @@map("application_skill")
}

model Elist {
  id             String    @id @db.Uuid
  applicant_id   String    @db.Uuid
  competition_id String    @db.Uuid
  rank           Int
  created_at     DateTime
  updated_at     DateTime?
  deleted_at     DateTime?

  applicant   User         @relation(fields: [applicant_id], references: [id])
  competition Competition  @relation(fields: [competition_id], references: [id])
  ElistOffer  ElistOffer[]

  @@map("competition_eligibility_list")
}

model ElistOffer {
  id          String    @id @db.Uuid
  elistId     String    @db.Uuid
  is_accepted Boolean
  //opportunityId String  @db.Uuid // Are these opportunities in our system?  Do they come from somewhere external? 
  created_at  DateTime
  updated_at  DateTime?
  deleted_at  DateTime?

  elist         Elist        @relation(fields: [elistId], references: [id])
  //opportunity Opportunity @relation(fields: [opportunityId], references: [id])
  Opportunity   Opportunity? @relation(fields: [opportunityId], references: [id])
  opportunityId String?      @db.Uuid
}

model OpportunityLocation {
  location_id    String    @db.Uuid
  opportunity_id String    @db.Uuid
  created_at     DateTime
  deleted_at     DateTime?

  location    Location    @relation(fields: [location_id], references: [id])
  opportunity Opportunity @relation(fields: [opportunity_id], references: [id])

  @@id([opportunity_id, location_id])
}

model OpportunitySkill {
  opportunity_id String    @db.Uuid
  skill_id       String    @db.Uuid
  created_at     DateTime
  deleted_at     DateTime?

  // opportunity Opportunity @relation(fields: [opportunity_id], references: [id])
  skill         Skill        @relation(fields: [skill_id], references: [id])
  Opportunity   Opportunity? @relation(fields: [opportunityId], references: [id])
  opportunityId String?      @db.Uuid

  @@id([opportunity_id, skill_id])
  @@map("opportunity_skill")
}

model Opportunity {
  id                    String                 @id @db.Uuid
  competition_id        String                 @db.Uuid
  deltek_id             String // Position #
  hiring_manager_id     String                 @db.Uuid
  ministry_id           String                 @db.Uuid
  state                 OpportunityState
  involvement           OpportunityInvolvement
  work_option           WorkOption
  description           String
  candidate_description String
  team_name             String
  team_description      String
  work_examples         String
  created_at            DateTime
  updated_at            DateTime?
  deleted_at            DateTime?

  skills         OpportunitySkill[]
  locations      OpportunityLocation[]
  competition    Competition           @relation(fields: [competition_id], references: [id])
  hiring_manager User                  @relation(fields: [hiring_manager_id], references: [id])
  ministry       Ministry              @relation(fields: [ministry_id], references: [id])
  ElistOffer     ElistOffer[]

  @@map("opportunity")
}

// Opportunity Models
enum OpportunityState {
  SUBMITTED
  REJECTED
  APPROVED
}

// Opportunity Models
enum OpportunityInvolvement {
  NONE
  FULL
}

// Opportunity Models
enum WorkOption {
  REMOTE
  HYBRID
  ON_PREM
}

model Comment {
  id          String    @id @db.Uuid
  record_id   String    @default("0")
  record_type String    @default("n/a")
  user_id     String    @db.Uuid
  text        String
  created_at  DateTime
  updated_at  DateTime?
  deleted_at  DateTime?

  user User @relation(fields: [user_id], references: [id])

  // @@id([record_id, record_type])
  @@map("comment")
}
